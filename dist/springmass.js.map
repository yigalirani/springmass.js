{
  "version": 3,
  "sources": ["../src/helpers.ts", "../src/calc.ts", "../src/springmass.ts"],
  "sourcesContent": ["\"use strict\";\r\nfunction trim(x, min_value, max_value) {\r\n  return Math.min(Math.max(x, min_value), max_value);\r\n}\r\nexport class Vec {\r\n  x: number;\r\n  y: number;\r\n  constructor(_x = 0, _y = 0) {\r\n    this.x = _x;\r\n    this.y = _y;\r\n  }\r\n  trim(min_value: number, max_value: number) {\r\n    return new Vec(\r\n      trim(this.x, min_value, max_value),\r\n      trim(this.y, min_value, max_value)\r\n    );\r\n  }\r\n  div(a: number) {\r\n    return new Vec(this.x / a, this.y / a);\r\n  }\r\n  add(right: Vec) {\r\n    return new Vec(this.x + right.x, this.y + right.y);\r\n  }\r\n  add_to(right: Vec) {\r\n    this.x += right.x;\r\n    this.y += right.y;\r\n  }\r\n  sub_to(right: Vec) {\r\n    this.x -= right.x;\r\n    this.y -= right.y;\r\n  }\r\n  sub(right) {\r\n    return new Vec(this.x - right.x, this.y - right.y);\r\n  }\r\n  mult(scalar) {\r\n    return new Vec(this.x * scalar, this.y * scalar);\r\n  }\r\n  dot_mult = function (right) {\r\n    return this.x * right.x + this.y * right.y;\r\n  };\r\n  calc_dist = function (p2) {\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    var p1 = this;\r\n    return Math.sqrt(\r\n      (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)\r\n    );\r\n  };\r\n}\r\nexport class Ball {\r\n  pos: Vec;\r\n  speed: Vec;\r\n  constructor(pos: Vec = new Vec(), speed: Vec = new Vec()) {\r\n    this.pos = pos;\r\n    this.speed = speed;\r\n  }\r\n}\r\nexport class Orientation{\r\n  absolute = 0;\r\n  alpha = 0;\r\n  beta = 0;\r\n  gamma = 0;\r\n}\r\nfunction system_time() {\r\n  return new Date().getTime() / 1000;\r\n}\r\nexport class Timer {\r\n  cur_time = 0;\r\n  time_diff = 0;\r\n  epoch_time = system_time(); //private class member hua\r\n  mark_time() {\r\n    var time = system_time() - this.epoch_time;\r\n    this.time_diff = Math.min(time - this.cur_time, 0.05);\r\n    this.cur_time = time;\r\n  }\r\n  constructor() {\r\n    this.mark_time();\r\n  }\r\n}\r\nexport function new_vector(size) {\r\n  return new Float64Array(size + 1);\r\n}\r\nexport interface Spring {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\nexport class TouchEx {\r\n  dragged_ball = -1;\r\n  dragged_ball_offset = new Vec();\r\n  timer = new Timer();\r\n  last_pos = new Vec();\r\n  identifier;\r\n  pageX: number;\r\n  pageY: number;\r\n  constructor(touch: Touch) {\r\n    this.identifier = touch.identifier;\r\n    this.pageX = touch.pageX;\r\n    this.pageY = touch.pageY;\r\n  }\r\n}\r\n", "import {Ball,Vec,new_vector,Spring,Timer} from './helpers.js'\r\nexport function calc_new_frame(balls:Ball[], springs:Spring[], radius, timer:Timer, width, height) {\r\n  var STRING_LEN = 100;\r\n  var NUM_STEPS = 10;\r\n  var num_balls = balls.length;\r\n  var is_colide = false;\r\n  function wall_power2(pos: number, wall_pos: number) {\r\n    //todo: use speed to calc friction\r\n    if (pos + radius > wall_pos) {\r\n      is_colide = true;\r\n      return -(pos + radius - wall_pos) * 1000;\r\n    }\r\n    if (pos - radius < 0) {\r\n      is_colide = true;\r\n      return -(pos - radius) * 1000;\r\n    }\r\n    return 0;\r\n  }\r\n  function wall_power(p: Ball) {\r\n    var ans = new Vec();\r\n    is_colide = false;\r\n    ans.x = wall_power2(p.pos.x, width);\r\n    ans.y = wall_power2(p.pos.y, height);\r\n    if (is_colide) ans.sub_to(p.speed.mult(10));\r\n    return ans;\r\n  }\r\n  function calc_collide_power(p1: Ball, p2: Ball, dist: number) {\r\n    if (dist > radius * 2) return new Vec();\r\n    var speed_diff = p2.speed.sub(p1.speed);\r\n    var force = 1000 * (dist - radius * 2);\r\n    var npos1 = p1.pos.div(dist);\r\n    var npos2 = p2.pos.div(dist);\r\n    force += 10 * speed_diff.dot_mult(npos2.sub(npos1));\r\n    var ans = npos2.sub(npos1).mult(force);\r\n    return ans;\r\n  }\r\n  function calc_spring_power(p1: Ball, p2: Ball) {\r\n    var dist = p1.pos.calc_dist(p2.pos);\r\n    var speed_diff = p2.speed.sub(p1.speed);\r\n    var force = 1000 * (dist - STRING_LEN);\r\n    var npos1 = p1.pos.div(dist);\r\n    var npos2 = p2.pos.div(dist);\r\n    force += 100 * speed_diff.dot_mult(npos2.sub(npos1));\r\n    var ans = npos2.sub(npos1).mult(force);\r\n    return ans;\r\n  }\r\n  function encode_balls(balls: Ball[], y: Ball[] | Float64Array) {\r\n    for (var i = 0; i < num_balls; i++) {\r\n      var p = balls[i];\r\n      y[i * 4 + 1] = p.pos.x;\r\n      y[i * 4 + 2] = p.pos.y;\r\n      y[i * 4 + 3] = p.speed.x;\r\n      y[i * 4 + 4] = p.speed.y;\r\n    }\r\n  }\r\n  function decode_balls(y) {\r\n    var ans: Ball[] = [];\r\n    for (var i = 0; i < num_balls; i++) {\r\n      var p = new Ball();\r\n      p.pos.x = y[i * 4 + 1];\r\n      p.pos.y = y[i * 4 + 2];\r\n      p.speed.x = y[i * 4 + 3];\r\n      p.speed.y = y[i * 4 + 4];\r\n      ans.push(p);\r\n    }\r\n    return ans;\r\n  }\r\n  function far_away_fast_calc2(p1, p2, dist) {\r\n    return p2 - p1 > dist || p1 - p2 > dist;\r\n  }\r\n  function far_away_fast_calc(p1, p2, dist) {\r\n    if (far_away_fast_calc2(p1.x, p2.x, dist)) return true;\r\n    if (far_away_fast_calc2(p1.y, p2.y, dist)) return true;\r\n    return false;\r\n  }\r\n  function the_derive(time, y, dy) {\r\n    //int i;\r\n    var balls = decode_balls(y);\r\n    var dballs: Ball[] = [];\r\n    var i;\r\n    for (i = 0; i < num_balls; i++) {\r\n      var p = balls[i];\r\n      var d = new Ball();\r\n      d.pos = p.speed;\r\n      d.speed = wall_power(p);\r\n      d.speed.y += 1000; //gravity\r\n      dballs.push(d);\r\n    }\r\n    for (i = 0; i < num_balls; i++)\r\n      for (var j = i + 1; j < num_balls; j++) {\r\n        var p1 = balls[i];\r\n        var p2 = balls[j];\r\n        if (far_away_fast_calc(p1.pos, p2.pos, radius * 2)) continue;\r\n        var dist = p1.pos.calc_dist(p2.pos);\r\n        var collide_power = calc_collide_power(p1, p2, dist);\r\n        dballs[i].speed.add_to(collide_power);\r\n        dballs[j].speed.sub_to(collide_power);\r\n      }\r\n    for (i = 0; i < springs.length; i++) {\r\n      var s = springs[i];\r\n      var spring_power = calc_spring_power(balls[s.start], balls[s.end]);\r\n      dballs[s.start].speed.add_to(spring_power);\r\n      dballs[s.end].speed.sub_to(spring_power);\r\n    }\r\n    encode_balls(dballs, dy);\r\n  }\r\n  function call_rk4(cur_time: number, time_diff: number) {\r\n    var y = new_vector(num_balls * 4);\r\n    var dydx = new_vector(num_balls * 4);\r\n    encode_balls(balls, y);\r\n    the_derive(cur_time, y, dydx); //the current implementation of derive does not uses the time, but can envision an implementation that might (gravity is off every second, perhaps?)\r\n    rk4({y, dydx, n:num_balls * 4, x:cur_time, h:time_diff,yout:y});\r\n    balls = decode_balls(y);\r\n  }\r\n  function rk4({y, dydx, n, x,h, yout}:{\r\n    y: Float64Array, \r\n    dydx: Float64Array, \r\n    n: number, \r\n    x: number, \r\n    h: number, \r\n    yout: Float64Array}) \r\n  {\r\n    /*translated to java from numerical recipies (see nr.com). here is the original doc:\r\n      Given values for the variables y[1..n] and their derivatives dydx[1..n] known at x, use the\r\n    fourth-order Runge-Kutta method to advance the solution over an interval h and return the\r\n    incremented variables as yout[1..n], which need not be a distinct array from y. The user\r\n    supplies the routine derivs(x,y,dydx), which returns derivatives dydx at x.*/ var i;\r\n    var xh, hh, h6;\r\n    var dym = new_vector(n);\r\n    var dyt = new_vector(n);\r\n    //16.1 Runge-Kutta Method 713\r\n    var yt = new_vector(n);\r\n    hh = h * 0.5;\r\n    h6 = h / 6.0;\r\n    xh = x + hh;\r\n    for (i = 1; i <= n; i++) yt[i] = y[i] + hh * dydx[i]; //First step.\r\n    the_derive(xh, yt, dyt); //Second step.\r\n    for (i = 1; i <= n; i++) yt[i] = y[i] + hh * dyt[i];\r\n    the_derive(xh, yt, dym); //Third step.\r\n    for (i = 1; i <= n; i++) {\r\n      yt[i] = y[i] + h * dym[i];\r\n      dym[i] += dyt[i];\r\n    }\r\n    the_derive(x + h, yt, dyt); //Fourth step.\r\n    for (\r\n      i = 1;\r\n      i <= n;\r\n      i++ //Accumulate increments with proper\r\n    )\r\n      yout[i] = y[i] + h6 * (dydx[i] + dyt[i] + 2.0 * dym[i]); //weights.\r\n  }\r\n  for (var i = 0; i < NUM_STEPS; i++)\r\n    call_rk4(timer.cur_time, timer.time_diff / NUM_STEPS); //too: acum the time?\r\n  return balls;\r\n}", "\"use strict\";\r\nimport {Ball,Vec,Spring,Timer,TouchEx,Orientation} from './helpers.js'\r\nimport {calc_new_frame} from './calc.js'\r\nfunction balls_widget() {\r\n  //project a global variabl wall_widget\r\n  const orientation=new Orientation();\r\n  var origin = 0;\r\n  var balls: Ball[] = [];\r\n  var radius = 40;\r\n  var springs: Spring[] = [];\r\n  var canvas = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n  var timer = new Timer();\r\n  var hover_ball = -1;\r\n  var dragged_ball = -1;\r\n  var dragged_ball_offset = new Vec();\r\n  var ongoingTouches: TouchEx[] = [];\r\n  var num_touch_start = 0;\r\n  function dist(a, b) {\r\n    return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\r\n  }\r\n  function init_rand(ball) {\r\n    ball.pos.x = my_rand(radius, canvas.width - radius);\r\n    ball.pos.y = my_rand(radius, canvas.height - radius);\r\n    ball.speed.x = my_rand(-1, 1);\r\n    ball.speed.y = my_rand(1, 2);\r\n  }\r\n  function my_rand(min: number, max: number) {\r\n    const r = Math.random();\r\n    //r=r%1000;\r\n    return r * (max - min) + min;\r\n  }\r\n  function add_spring(_start, _end) {\r\n    springs.push({ start: _start, end: _end });\r\n  }\r\n  function init_world() {\r\n    add_spring(0, 1);\r\n    add_spring(1, 2);\r\n    add_spring(2, 0);\r\n    add_spring(3, 4);\r\n    add_spring(4, 5);\r\n    add_spring(5, 3);\r\n    add_spring(0, 4);\r\n    for (var i = 0; i < 10; i++) {\r\n      var p = new Ball();\r\n      init_rand(p);\r\n      balls.push(p);\r\n    }\r\n  }\r\n  function get_dragged_indexes() {\r\n    // Extract \"l\" property values from ongoingTouches\r\n    const indexes = ongoingTouches.map((touch) => touch.dragged_ball);\r\n    // Add dragged_ball to the array\r\n    indexes.push(dragged_ball);\r\n    // Filter out all -1 values\r\n    const filteredIndexes = indexes.filter((index) => index !== -1);\r\n    return filteredIndexes;\r\n  }\r\n  function animate() {\r\n    if (timer.time_diff === 0) return; //not enought time has passed, dont animate-crach fix\r\n    if (balls.length === 0) return;\r\n    var new_balls = calc_new_frame(\r\n      balls,\r\n      springs,\r\n      radius,\r\n      timer,\r\n      canvas?.width,\r\n      canvas?.height\r\n    );\r\n    var dragged = get_dragged_indexes();\r\n    for (const x of dragged) {\r\n      new_balls[x] = balls[x]; //when dragging, dissregard animate results for dragged ball\r\n    }\r\n    balls = new_balls;\r\n  }\r\n  function find_ball(event) {\r\n    return balls.findIndex(function (x) {\r\n      return dist(event, x.pos) < radius;\r\n    });\r\n  }\r\n  function point_from_event(event) {\r\n    var rect = canvas.getBoundingClientRect();\r\n    return new Vec(event.clientX - rect.left, event.clientY - rect.top);\r\n  }\r\n  function mouseup() {\r\n    dragged_ball = -1;\r\n  }\r\n  function mousedown(event) {\r\n    var mousedown_point = point_from_event(event);\r\n    dragged_ball = find_ball(mousedown_point);\r\n    if (dragged_ball == -1) balls.push(new Ball(mousedown_point));\r\n    else {\r\n      dragged_ball_offset = balls[dragged_ball].pos.sub(mousedown_point);\r\n    }\r\n  }\r\n  function mousemove(event) {\r\n    var mouse_point = point_from_event(event);\r\n    if (dragged_ball != -1) {\r\n      var mouse_speed = new Vec(event.movementX, event.movementY);\r\n      var newpoint = point_from_event(event);\r\n      balls[dragged_ball].pos = newpoint.add(dragged_ball_offset);\r\n      balls[dragged_ball].speed = mouse_speed.mult(20);\r\n      draw();\r\n      return;\r\n    }\r\n    hover_ball = find_ball(mouse_point);\r\n  }\r\n  function draw() {\r\n    if (!canvas.getContext) return;\r\n    timer.mark_time();\r\n    animate();\r\n    origin += 10;\r\n    if (origin > 500) origin = 10;\r\n    var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    ctx.canvas.width = window.innerWidth - 20;\r\n    ctx.canvas.height = window.innerHeight - 20;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = \"rgb(0,0,0)\";\r\n    ctx.fill();\r\n    var i;\r\n    for (i = 0; i < balls.length; i++) {\r\n      ctx.beginPath();\r\n      var ball = balls[i].pos;\r\n      ctx.arc(ball.x, ball.y, radius, 0, Math.PI * 2, true);\r\n      ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\r\n      if (hover_ball == i) ctx.fillStyle = \"rgba(200, 0,0 , 0.5)\";\r\n      if (dragged_ball == i) ctx.fillStyle = \"rgba(0, 100,200 , 0.5)\";\r\n      ctx.fill();\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillText(i+','+ball.x+','+ball.y, ball.x, ball.y);\r\n    }\r\n    ctx.setLineDash([3, 3]);\r\n    for (i = 0; i < springs.length; i++) {\r\n      var a = balls[springs[i].start].pos;\r\n      var b = balls[springs[i].end].pos;\r\n      ctx.beginPath();\r\n      ctx.moveTo(a.x, a.y);\r\n      ctx.lineTo(b.x, b.y);\r\n      ctx.stroke();\r\n    }\r\n    ctx.fillStyle = \"black\";\r\n    JSON.stringify(orientation,null,2).split('\\n').forEach((txt,y)=>\r\n      ctx.fillText(txt,100, 100+y*10)\r\n    )\r\n\r\n  }\r\n  function handleOrientation(event) {\r\n    orientation.absolute = event.absolute;\r\n    orientation.alpha = event.alpha;\r\n    orientation.beta = event.beta;\r\n    orientation.gamma = event.gamma;\r\n  \r\n    // Do stuff with the new orientation data\r\n  }\r\n  function touch_start(evt) {\r\n    num_touch_start=num_touch_start+1;\r\n    evt.preventDefault();\r\n    var touches = evt.changedTouches;\r\n    for (const x of touches) {\r\n      var touch = new TouchEx(x);\r\n      var point = point_from_touch(x);\r\n      touch.last_pos = point;\r\n      touch.dragged_ball = find_ball(point);\r\n      if (touch.dragged_ball == -1) balls.push(new Ball(point));\r\n      else {\r\n        touch.dragged_ball_offset = balls[touch.dragged_ball].pos.sub(point);\r\n      }\r\n      ongoingTouches.push(touch);\r\n    }\r\n  }\r\n  function findTouch(touch) {\r\n    return ongoingTouches.findIndex(function (t) {\r\n      return t.identifier === touch.identifier;\r\n    });\r\n  }\r\n  function point_from_touch(touch) {\r\n    return point_from_event(touch);\r\n  }\r\n  function touch_move(evt) {\r\n    evt.preventDefault();\r\n    var touches = evt.changedTouches;\r\n    for (const touch of touches) {\r\n      var idx = findTouch(touch);\r\n      var exist = ongoingTouches[idx];\r\n      if (!exist || exist.dragged_ball == -1) return;\r\n      var pos = point_from_touch(touch).add(exist.dragged_ball_offset);\r\n      balls[exist.dragged_ball].pos = pos;\r\n      exist.timer.mark_time();\r\n      var speed = pos.sub(exist.last_pos).div(exist.timer.time_diff);\r\n      balls[exist.dragged_ball].speed = speed;\r\n      exist.last_pos = pos;\r\n    }\r\n    draw();\r\n  }\r\n  function touch_end(evt) {\r\n    evt.preventDefault();\r\n    for (const touch of evt.changedTouches) {\r\n      var idx = findTouch(touch);\r\n      if (idx != -1) ongoingTouches.splice(idx, 1);\r\n    }\r\n  }\r\n  function attach_handlers() {\r\n    canvas.addEventListener(\"mouseup\", mouseup, false);\r\n    canvas.addEventListener(\"mousemove\", mousemove, false);\r\n    canvas.addEventListener(\"mousedown\", mousedown, false);\r\n    canvas.addEventListener(\"touchstart\", touch_start, false);\r\n    canvas.addEventListener(\"touchmove\", touch_move, false);\r\n    canvas.addEventListener(\"touchend\", touch_end, false);\r\n    window.addEventListener(\"deviceorientation\", handleOrientation, true);\r\n    setInterval(draw, 30);\r\n  }\r\n  init_world();\r\n  attach_handlers();\r\n}\r\nballs_widget();\r\n"],
  "mappings": "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",
  "names": ["balls", "i"]
}
